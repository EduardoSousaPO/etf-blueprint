VocÃª, **Cursor.ai**, Ã© o "dev-squad" responsÃ¡vel por **FINALIZAR e SANEAR** o repositÃ³rio **etf-blueprint** (link GitHub no workspace).  
Objetivo: entregar um **app Streamlit Cloud estÃ¡vel em pÃ¡gina Ãºnica** que:

1. Coleta perfil de investidor (horizonte, tolerÃ¢ncia, retorno-alvo + escolha de universo: "SÃ³ BR", "SÃ³ EUA", "Ambos").  
2. Gera carteira otimizada de **exatos 10 ETFs**, cada um entre **4 % â€“ 20 %**, usando dados da **FMP API** + **PyPortfolioOpt**.  
3. Cria anÃ¡lise textual com a **OpenAI API**.  
4. Exibe tabela, grÃ¡ficos Plotly e permite download em **CSV** e **PDF**.  
5. Faz deploy sem erros no **Streamlit Community Cloud**.

Todas as recomendaÃ§Ãµes vÃªm do diagnÃ³stico  
*"CorreÃ§Ã£o do Projeto ETF Blueprint para Deploy no Streamlit Cloud"*.

---

# ========== TAREFAS DETALHADAS ==========

## 1 Â· Estrutura & NavegaÃ§Ã£o
* Consolidar tudo em **`streamlit_app.py`** (pÃ¡gina Ãºnica).  
* Controlar fluxo com `st.session_state['stage']  # "input" | "result"`.  
* Remover pÃ¡ginas antigas (`pages/`, `home.py`) e qualquer `st.experimental_rerun` ou query-params.

## 2 Â· ConfiguraÃ§Ã£o Inicial

```python
import streamlit as st
st.set_page_config(page_title="ETF Blueprint",
                   page_icon="ğŸ“ˆ",
                   layout="wide")
```
Apenas UMA vez no topo do script.

## 3 Â· FormulÃ¡rio de Perfil

| Campo            | Widget                                                           |
| ---------------- | ---------------------------------------------------------------- |
| Perfil de Risco  | `st.selectbox("Perfil", ["Conservador","Moderado","Agressivo"])` |
| Horizonte (anos) | `st.number_input(...)`                                           |
| Drawdown MÃ¡x (%) | `st.slider(...)`                                                 |
| Universo         | `st.radio("ETFs", ["BR","EUA","Ambos"])`                         |
| BotÃ£o            | `st.form_submit_button("Gerar Carteira")`                        |


Gravar resultado em st.session_state.perfil.


## 4 Â· Universos de Ativos

```python
ETFS_EUA = [...]       # lista de 50 tickers
ETFS_BR  = [...]       # lista b3_etfs completa
def filtrar_universo(opcao):
    if opcao=="BR":   return ETFS_BR
    if opcao=="EUA":  return ETFS_EUA
    return ETFS_BR + ETFS_EUA
```

## 5 Â· ObtenÃ§Ã£o de Dados (FMP)
backend/services/fmp_service.py


```python
def get_prices(tickers:list, years:int=5)->pd.DataFrame:
    # usa endpoint /historical-price-full/{symbol}
    # cache em st.session_state["prices_cache"]
```


## 6 Â· OtimizaÃ§Ã£o
backend/services/optimizer.py

```python
from pypfopt import EfficientFrontier
def otimizar(tickers, perfil):
    mu, S = estimar_retornos_cov(tickers)
    ef = EfficientFrontier(mu, S)
    ef.add_constraint(lambda w: w>=0.04)
    ef.add_constraint(lambda w: w<=0.20)
    if perfil=="Conservador":
        ef.min_volatility()
    elif perfil=="Moderado":
        ef.max_sharpe()
    else:
        ef.efficient_risk(target_risk=0.20)
    pesos = ef.clean_weights()
    top10 = dict(sorted(pesos.items(), key=lambda x:x[1], reverse=True)[:10])
    total = sum(top10.values())
    top10 = {k:v/total for k,v in top10.items()}
    return top10, ef.portfolio_performance(verbose=False)
```
## 7 Â· AnÃ¡lise IA (OpenAI)
backend/services/openai_service.py

```python
def gerar_texto(carteira, perfil):
    prompt = f"""
    VocÃª Ã© analista. Explique esta carteira de 10 ETFs {carteira}
    para um investidor {perfil}, em atÃ© 400 palavras, em portuguÃªs simples.
    """
    resp = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role":"user","content":prompt}],
        temperature=0.2
    )
    return resp.choices[0].message.content.strip()
```

## 8 Â· VisualizaÃ§Ã£o
st.success("Carteira otimizada!")

st.dataframe(df_aloc, height=300) (sem use_container_width)

Plotly pie + fronteira.

Guardar resultado em st.session_state.portfolio_result.

## 9 Â· ExportaÃ§Ã£o
```python
st.download_button("Baixar CSV",
                   df_aloc.to_csv(index=False).encode(),
                   "carteira.csv",
                   "text/csv")
```

PDF
utils/pdf_report.py
HTML â†’ WeasyPrint â†’ bytes â†’ st.download_button("Baixar PDF", ...).


## 10 Â· ConfiguraÃ§Ã£o & DependÃªncias
.streamlit/config.toml

```
[server]
fileWatcherType = "none"
```


requirements.txt

```
makefile
Copiar
Editar
streamlit==1.28.0
pandas
numpy
pypfopt
plotly
openai
requests
weasyprint
```


Adicionar OPENAI_API_KEY e FMP_API_KEY em Secrets do Cloud.


## 11 Â· Qualidade & Teste
ruff + black format.

Tests (pytest):

test_optimizer.py â€“ verifica 10 ativos, soma=1, limites 0.04-0.20.

Local run â†’ streamlit run streamlit_app.py â€“ fluxo completo.

Push â†’ Streamlit Cloud build â†’ logs limpos, app funcional.

## 12 Â· EntregÃ¡veis
Branch fix/cloud_deploy com:

streamlit_app.py

backend/services/*.py

utils/pdf_report.py

.streamlit/config.toml

requirements.txt

tests/

PR + checklist: App roda local & Cloud, CSV/PDF OK, testes â‰¥90 %.


## CHECAGEM DE QUALIDADE

ruff . e black --check . passam.

pytest -q verde.

streamlit run streamlit_app.py sem tracebacks.

Deploy no Cloud sem erros de inotify, sem use_container_width crash.

Fluxo completo: perfil â†’ carteira â†’ grÃ¡ficos â†’ CSV/PDF ok.

START

Crie a branch fix/cloud_deploy e execute as tarefas na ordem.
PeÃ§a confirmaÃ§Ã£o somente se algum requisito estiver ambÃ­guo.
