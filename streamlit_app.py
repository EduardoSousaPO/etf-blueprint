import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import os
import sys
import requests
import json
import openai
from dotenv import load_dotenv
from datetime import datetime
import io
from PIL import Image
import matplotlib.pyplot as plt
import cvxpy as cp
import scipy.stats

# Configura√ß√£o Inicial
st.set_page_config(
    page_title="ETF Blueprint",
    page_icon="üìà",
    layout="wide"
)

# Esconder o menu do Streamlit e o rodap√©
hide_menu_style = """
    <style>
        #MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
        .stDeployButton {display:none;}
    </style>
    """
st.markdown(hide_menu_style, unsafe_allow_html=True)

# Carregar vari√°veis de ambiente
load_dotenv()

# Chaves API
FMP_API_KEY = os.getenv("FMP_API_KEY", st.secrets.get("FMP_API_KEY", ""))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", st.secrets.get("OPENAI_API_KEY", ""))

# Configurar OpenAI
openai.api_key = OPENAI_API_KEY

# Definir listas de ETFs
ETFS_BR = [
    "BBSD11", "BOVA11", "BOVB11", "BOVS11", "BOVV11", "BRAX11", 
    "DIVO11", "ECOO11", "FIND11", "GOVE11", "HASH11", "ISPT11", 
    "IVVB11", "META11", "PIBB11", "QBTC11", "QETH11", "RICH11", 
    "SMAL11", "URA11", "XFIX11", "XINA11"
]

ETFS_EUA = [
    "SPY", "QQQ", "IWM", "DIA", "VTI", "IEFA", "EFA", "IEMG", "EEM", 
    "AGG", "BND", "LQD", "HYG", "TLT", "IEF", "GLD", "IAU", "SLV", 
    "XLK", "XLF", "XLV", "XLE", "XLY", "XLI", "XLP", "XLU", "XLB", 
    "XLC", "XLRE", "VGT", "VHT", "VOX", "VCR", "VAW", "VPU", "VFH", 
    "VDE", "VIS", "VDC", "VNQ", "IYR", "ARKK", "ARKW", "ARKF", "ARKG", 
    "ARKX", "QYLD", "JEPI", "JEPQ", "SCHD"
]

# Fun√ß√£o para filtrar universo de ETFs
def filtrar_universo(opcao):
    if opcao == "BR":
        return ETFS_BR
    if opcao == "EUA":
        return ETFS_EUA
    return ETFS_BR + ETFS_EUA

# Fun√ß√£o para obter pre√ßos hist√≥ricos modificada com fallback para dados simulados
def get_prices(tickers, start_date=None, end_date=None):
    """
    Obt√©m pre√ßos hist√≥ricos para os tickers fornecidos.
    Retorna um DataFrame com os pre√ßos.
    """
    # Verificar se a API KEY da FMP est√° dispon√≠vel
    fmp_api_key = st.secrets.get("api_keys", {}).get("FMP_API_KEY", "")
    
    # Se n√£o tiver API KEY ou estiver vazia, usar dados simulados
    if not fmp_api_key:
        return generate_simulated_prices(tickers)
    
    # Tentar obter dados da API
    try:
        all_data = pd.DataFrame()
        for ticker in tickers:
            try:
                url = f"https://financialmodelingprep.com/api/v3/historical-price-full/{ticker}?apikey={fmp_api_key}"
                response = requests.get(url)
                data = response.json()
                
                if 'historical' not in data:
                    continue
                
                df = pd.DataFrame(data['historical'])
                df['ticker'] = ticker
                df['date'] = pd.to_datetime(df['date'])
                df = df.set_index('date')
                
                all_data = pd.concat([all_data, df])
            except Exception as e:
                st.warning(f"Erro ao obter dados para {ticker}: {e}")
                continue
        
        if all_data.empty:
            return generate_simulated_prices(tickers)
        
        all_data = all_data.pivot(columns='ticker', values='adjClose')
        return all_data
    except Exception as e:
        st.warning(f"Erro ao obter dados hist√≥ricos: {e}")
        return generate_simulated_prices(tickers)

# Fun√ß√£o para gerar dados simulados quando a API n√£o estiver dispon√≠vel
def generate_simulated_prices(tickers, days=252*2):
    """
    Gera pre√ßos simulados para os tickers fornecidos.
    Retorna um DataFrame com os pre√ßos simulados.
    """
    np.random.seed(42)  # Para reprodutibilidade
    
    # Criar datas para os √∫ltimos 2 anos (aproximadamente 252 dias √∫teis por ano)
    end_date = datetime.datetime.now()
    dates = [end_date - datetime.timedelta(days=i) for i in range(days)]
    dates.reverse()
    
    simulated_data = pd.DataFrame(index=dates)
    
    for ticker in tickers:
        # Definir pre√ßo inicial entre 50 e 200
        initial_price = np.random.uniform(50, 200)
        
        # Simular uma tend√™ncia com volatilidade realista
        returns = np.random.normal(0.0003, 0.015, days)  # m√©dia positiva pequena, desvio 1.5%
        prices = [initial_price]
        
        for ret in returns:
            prices.append(prices[-1] * (1 + ret))
        
        simulated_data[ticker] = prices[1:]  # Remover o pre√ßo inicial extra
    
    simulated_data.index = pd.DatetimeIndex(dates)
    return simulated_data

# Fun√ß√£o para estimar retornos e covari√¢ncia
def estimar_retornos_cov(prices_df):
    # Calcular retornos di√°rios
    returns = prices_df.pct_change().dropna()
    
    # Calcular m√©dia anualizada (252 dias √∫teis)
    mu = returns.mean() * 252
    
    # Calcular matriz de covari√¢ncia anualizada
    S = returns.cov() * 252
    
    return mu, S

# Fun√ß√£o para otimizar a carteira modificada para usar dados simulados se necess√°rio
def otimizar(tickers, perfil, prices_df=None):
    if prices_df is None or prices_df.empty:
        prices_df = get_prices(tickers)
    
    if prices_df.empty:
        return {}, (0, 0, 0)
    
    # Remover colunas com valores ausentes
    prices_df = prices_df.dropna(axis=1)
    
    # Verificar se temos dados suficientes
    if prices_df.shape[1] < 10:
        st.warning(f"Dados insuficientes. Apenas {prices_df.shape[1]} ETFs com dados completos.")
        return {}, (0, 0, 0)
    
    # Se n√£o temos CVXPY dispon√≠vel, usar implementa√ß√£o alternativa
    if not CVXPY_AVAILABLE:
        return _otimizar_alternativo(prices_df, perfil)
    
    try:
        # Calcular retornos e matriz de covari√¢ncia
        returns = prices_df.pct_change().dropna()
        
        # Aplicar winsorization para remover outliers extremos
        # Isso ajuda a melhorar a estabilidade do modelo
        winsor_returns = returns.copy()
        for col in winsor_returns.columns:
            winsor_returns[col] = scipy.stats.mstats.winsorize(winsor_returns[col], limits=[0.01, 0.01])
        
        # Calcular retornos esperados e matriz de covari√¢ncia
        expected_returns = winsor_returns.mean() * 252  # Anualizado
        cov_matrix = winsor_returns.cov() * 252  # Anualizada

        # Garantir que os retornos esperados n√£o sejam todos negativos
        if (expected_returns <= 0).all():
            # Adicionar um pequeno valor positivo para garantir que existam retornos positivos
            expected_returns = expected_returns + abs(expected_returns.min()) + 0.02

        # N√∫mero de ativos
        n_assets = len(expected_returns)
        
        # Definir vari√°veis de peso
        weights = cp.Variable(n_assets)
        
        # Restri√ß√µes comuns para todos os perfis
        constraints = [
            cp.sum(weights) == 1,  # Soma dos pesos = 1
            weights >= 0.04,        # M√≠nimo de 4% por ativo
            weights <= 0.20         # M√°ximo de 20% por ativo
        ]

        # Escolher objetivo e restri√ß√µes adicionais com base no perfil
        if perfil == "Conservador":
            # Minimizar risco (vari√¢ncia do portf√≥lio)
            risk = cp.quad_form(weights, cov_matrix)
            objective = cp.Minimize(risk)
            
            # Adicionar restri√ß√£o de retorno m√≠nimo para evitar portf√≥lio muito defensivo
            constraints.append(expected_returns @ weights >= 0.05)  # Retorno m√≠nimo de 5%
            
        elif perfil == "Moderado":
            # Maximizar Sharpe Ratio (retorno / risco)
            risk = cp.quad_form(weights, cov_matrix)
            ret = expected_returns @ weights
            # Como n√£o podemos maximizar ret/risk diretamente, fixamos o denominador
            objective = cp.Maximize(ret)
            constraints.append(risk <= 0.1)  # Risco moderado (10% volatilidade anual)
            
        else:  # "Agressivo"
            # Maximizar retorno com restri√ß√£o de risco
            ret = expected_returns @ weights
            risk = cp.quad_form(weights, cov_matrix)
            objective = cp.Maximize(ret)
            constraints.append(risk <= 0.2)  # Permitir risco maior (20% volatilidade anual)
        
        # Resolver o problema de otimiza√ß√£o
        prob = cp.Problem(objective, constraints)
        try:
            prob.solve()
            
            if prob.status not in ["infeasible", "unbounded"]:
                # Obter pesos √≥timos
                optimal_weights = weights.value
                
                # Criar dicion√°rio de aloca√ß√£o
                allocation = {}
                for i, ticker in enumerate(expected_returns.index):
                    if optimal_weights[i] > 0.001:  # Ignorar pesos muito pequenos
                        allocation[ticker] = round(optimal_weights[i] * 100, 2)
                
                # Calcular m√©tricas do portf√≥lio otimizado
                portfolio_return = (expected_returns @ optimal_weights)
                portfolio_risk = np.sqrt(optimal_weights @ cov_matrix @ optimal_weights)
                portfolio_sharpe = portfolio_return / portfolio_risk
                
                return allocation, (portfolio_return, portfolio_risk, portfolio_sharpe)
            else:
                # Se o problema for invi√°vel ou ilimitado, usar m√©todo alternativo
                return _otimizar_alternativo(prices_df, perfil)
        except Exception as e:
            st.warning(f"Erro na otimiza√ß√£o: {e}")
            return _otimizar_alternativo(prices_df, perfil)
            
    except Exception as e:
        st.warning(f"Erro na prepara√ß√£o dos dados: {e}")
        return _otimizar_alternativo(prices_df, perfil)

# Fun√ß√£o alternativa para otimiza√ß√£o quando CVXPY n√£o est√° dispon√≠vel
def _otimizar_alternativo(prices_df, perfil):
    """
    Implementa√ß√£o simplificada de otimiza√ß√£o sem usar CVXPY.
    Usa retornos, volatilidade e correla√ß√µes para criar uma carteira razo√°vel.
    """
    # Calcular retornos hist√≥ricos
    returns = prices_df.pct_change().dropna()
    
    # Calcular estat√≠sticas b√°sicas
    mean_returns = returns.mean() * 252  # Anualizados
    volatility = returns.std() * np.sqrt(252)  # Anualizada
    sharpe = mean_returns / volatility
    
    # Selecionar ativos com base no perfil
    selected_assets = pd.DataFrame({
        'ticker': returns.columns,
        'return': mean_returns,
        'volatility': volatility,
        'sharpe': sharpe
    })
    
    if perfil == "Conservador":
        # Ordenar por volatilidade (menor primeiro)
        top10 = selected_assets.sort_values('volatility').head(10)
    elif perfil == "Moderado":
        # Ordenar por Sharpe ratio (maior primeiro)
        top10 = selected_assets.sort_values('sharpe', ascending=False).head(10)
    else:  # Agressivo
        # Ordenar por retorno esperado (maior primeiro)
        top10 = selected_assets.sort_values('return', ascending=False).head(10)
    
    # Atribuir pesos diferenciados com base no perfil
    if perfil == "Conservador":
        # Mais peso para ativos menos vol√°teis (decrescente, de 20% a 4%)
        weights = np.linspace(0.20, 0.04, 10)
    elif perfil == "Moderado":
        # Peso mais equilibrado mas ainda diferente para cada ativo
        weights = np.linspace(0.16, 0.06, 10)
    else:  # Agressivo
        # Mais peso para ativos com maior retorno (decrescente, de 20% a 4%)
        weights = np.linspace(0.20, 0.04, 10)
    
    # Garantir que a soma seja exatamente 1
    weights = weights / weights.sum()
    
    # Garantir limites m√≠nimo e m√°ximo
    weights = np.clip(weights, 0.04, 0.20)
    
    # Normalizar novamente para garantir soma = 1
    weights = weights / weights.sum()
    
    # Criar dicion√°rio de pesos
    portfolio = {ticker: weight for ticker, weight in zip(top10['ticker'], weights)}
    
    # Calcular performance esperada
    expected_return = (top10['return'] * weights).sum()
    port_volatility = np.sqrt(np.dot(weights, np.dot(returns[top10['ticker']].cov() * 252, weights)))
    sharpe_ratio = expected_return / port_volatility
    
    return portfolio, (expected_return, port_volatility, sharpe_ratio)

# Fun√ß√£o para gerar an√°lise de texto com OpenAI
def gerar_texto(carteira, perfil):
    prompt = f"""
    Voc√™ √© analista. Explique esta carteira de 10 ETFs {carteira}
    para um investidor {perfil}, em at√© 400 palavras, em portugu√™s simples.
    """
    
    try:
        # Verificar se a API key est√° dispon√≠vel
        if not OPENAI_API_KEY:
            return "N√£o foi poss√≠vel gerar a an√°lise: Chave de API do OpenAI n√£o configurada."
        
        # Atualizar para usar a nova API da OpenAI
        try:
            from openai import OpenAI
            
            # Remover poss√≠veis prefixos que causam erros
            clean_api_key = OPENAI_API_KEY
            if clean_api_key.startswith("sk-proj-"):
                # Remover prefixo que pode causar o erro "Incorrect API key provided"
                clean_api_key = clean_api_key.replace("sk-proj-", "sk-")
            
            # Criar cliente com a API key limpa
            client = OpenAI(api_key=clean_api_key)
            
            # Fazer a chamada para a API com o novo formato
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um analista financeiro especializado em ETFs e investimentos."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.2,
                max_tokens=800
            )
            
            # Extrair e retornar o texto da resposta
            return response.choices[0].message.content.strip()
        except Exception as api_error:
            # Fallback para a API antiga
            try:
                resp = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.2
                )
                return resp.choices[0].message.content.strip()
            except Exception as e:
                return f"N√£o foi poss√≠vel gerar a an√°lise: {str(e)}. Voc√™ pode encontrar sua API key em https://platform.openai.com/account/api-keys."
    except Exception as e:
        return f"N√£o foi poss√≠vel gerar a an√°lise: {str(e)}"

# Fun√ß√£o para gerar texto de an√°lise com OpenAI (ap√≥s a fun√ß√£o gerar_texto existente)
def gerar_texto_demo(carteira, perfil):
    """
    Gera um texto de an√°lise para o modo de demonstra√ß√£o, sem usar a API OpenAI.
    """
    etfs_list = list(carteira.keys())
    alocacao_list = list(carteira.values())
    
    if perfil == "Conservador":
        return f"""Esta carteira otimizada de {len(etfs_list)} ETFs est√° alinhada com seu perfil conservador, priorizando a preserva√ß√£o de capital e estabilidade. 
        
A diversifica√ß√£o entre {', '.join(etfs_list[:3])} e outros ETFs ajuda a reduzir a volatilidade e proporcionar um crescimento consistente ao longo do tempo.

A aloca√ß√£o est√° balanceada para minimizar o risco, com maior peso em {etfs_list[0]} ({alocacao_list[0]}%) e {etfs_list[1]} ({alocacao_list[1]}%), que historicamente apresentam menor volatilidade.

Recomenda-se revis√£o semestral da carteira para pequenos ajustes conforme as condi√ß√µes de mercado."""
    
    elif perfil == "Moderado":
        return f"""Esta carteira de {len(etfs_list)} ETFs foi otimizada para seu perfil moderado, buscando um equil√≠brio entre crescimento e prote√ß√£o patrimonial.
        
Com maior aloca√ß√£o em {etfs_list[0]} ({alocacao_list[0]}%) e {etfs_list[1]} ({alocacao_list[1]}%), a carteira combina instrumentos de maior potencial de valoriza√ß√£o com outros mais est√°veis.

A diversifica√ß√£o entre diferentes classes de ativos proporciona uma exposi√ß√£o balanceada ao mercado, adequada para um horizonte de investimento de m√©dio prazo.

Recomenda-se revis√£o trimestral da carteira para ajustes que mantenham o alinhamento com seus objetivos financeiros."""
    
    else:  # Agressivo
        return f"""Esta carteira de {len(etfs_list)} ETFs est√° alinhada com seu perfil agressivo, focando em maximizar retornos com maior toler√¢ncia √† volatilidade.
        
A aloca√ß√£o d√° prefer√™ncia a {etfs_list[0]} ({alocacao_list[0]}%) e {etfs_list[1]} ({alocacao_list[1]}%), ETFs com maior potencial de valoriza√ß√£o, complementados por outros instrumentos para diversifica√ß√£o estrat√©gica.

Esta composi√ß√£o busca capturar oportunidades de crescimento significativo no longo prazo, aceitando oscila√ß√µes de mercado no curto e m√©dio prazo.

Recomenda-se revis√£o mensal ou bimestral da carteira para potencialmente aumentar a exposi√ß√£o em segmentos com momentum favor√°vel."""

# Fun√ß√£o para gerar relat√≥rio PDF
def gerar_pdf(df_aloc, analise_texto, perfil, universo, performance):
    # Importa√ß√µes necess√°rias para o ReportLab
    from reportlab.lib import colors
    from reportlab.lib.pagesizes import A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import mm, cm
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
    from reportlab.lib.enums import TA_CENTER, TA_LEFT
    import io
    from datetime import datetime
    
    # Criar um buffer para o PDF
    buffer = io.BytesIO()
    
    # Configura√ß√µes de p√°gina
    doc = SimpleDocTemplate(
        buffer, 
        pagesize=A4,
        leftMargin=1.5*cm,
        rightMargin=1.5*cm,
        topMargin=2*cm,
        bottomMargin=2*cm
    )
    
    # Lista para armazenar os elementos do documento
    story = []
    
    # Estilos de texto
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'TitleStyle',
        parent=styles['Title'],
        fontSize=16,
        alignment=TA_CENTER,
        spaceAfter=6*mm
    )
    
    subtitle_style = ParagraphStyle(
        'SubtitleStyle',
        parent=styles['Heading2'],
        fontSize=14,
        alignment=TA_CENTER,
        spaceAfter=6*mm
    )
    
    header_style = ParagraphStyle(
        'HeaderStyle',
        parent=styles['Heading3'],
        fontSize=12,
        alignment=TA_LEFT,
        spaceAfter=3*mm
    )
    
    normal_style = ParagraphStyle(
        'NormalStyle',
        parent=styles['Normal'],
        fontSize=10,
        spaceBefore=1*mm,
        spaceAfter=3*mm
    )
    
    # Cabe√ßalho do documento
    story.append(Paragraph("ETF Blueprint - Relat√≥rio de Carteira", title_style))
    story.append(Paragraph(f"Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M')}", normal_style))
    story.append(Spacer(1, 5*mm))
    
    # Perfil do investidor
    story.append(Paragraph("Perfil do Investidor", header_style))
    story.append(Paragraph(f"Perfil: <b>{perfil}</b>", normal_style))
    story.append(Paragraph(f"Universo de ETFs: <b>{universo}</b>", normal_style))
    story.append(Spacer(1, 5*mm))
    
    # Carteira otimizada
    story.append(Paragraph("Carteira Otimizada", header_style))
    
    # Dados para a tabela
    table_data = [["ETF", "Aloca√ß√£o (%)"]]
    for index, row in df_aloc.iterrows():
        table_data.append([row['ETF'], f"{row['Aloca√ß√£o (%)']:.2f}%"])
    
    # Estilo da tabela
    table_style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BOX', (0, 0), (-1, -1), 1, colors.black),
    ])
    
    # Criar tabela
    etf_table = Table(table_data, colWidths=[doc.width*0.6, doc.width*0.3])
    etf_table.setStyle(table_style)
    story.append(etf_table)
    story.append(Spacer(1, 5*mm))
    
    # Performance esperada
    expected_return, volatility, sharpe = performance
    story.append(Paragraph("Performance Esperada", header_style))
    
    # Dados para a tabela de performance
    perf_data = [
        ["Retorno Anual Esperado:", f"{expected_return*100:.2f}%"],
        ["Volatilidade Anual:", f"{volatility*100:.2f}%"],
        ["√çndice Sharpe:", f"{sharpe:.2f}"]
    ]
    
    # Criar tabela de performance
    perf_table = Table(perf_data, colWidths=[doc.width*0.6, doc.width*0.3])
    perf_table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
        ('GRID', (0, 0), (-1, -1), 1, colors.lightgrey),
        ('BOX', (0, 0), (-1, -1), 1, colors.lightgrey),
    ]))
    story.append(perf_table)
    story.append(Spacer(1, 10*mm))
    
    # An√°lise da carteira
    story.append(Paragraph("An√°lise da Carteira", header_style))
    story.append(Paragraph(analise_texto, normal_style))
    
    # Rodap√©
    story.append(Spacer(1, 10*mm))
    story.append(Paragraph(f"¬© {datetime.now().year} ETF Blueprint - Todos os direitos reservados", 
                          ParagraphStyle('Footer', parent=styles['Normal'], alignment=TA_CENTER, fontSize=8)))
    
    # Gerar PDF
    doc.build(story)
    
    # Retornar o conte√∫do do buffer
    buffer.seek(0)
    return buffer.getvalue()

# C√≥digo principal do aplicativo (substitua a se√ß√£o existente ap√≥s as fun√ß√µes)
if __name__ == "__main__":
    # Interface do usu√°rio
    st.set_page_config(page_title="ETF Blueprint üìà", page_icon="üìà")
    
    # T√≠tulo e descri√ß√£o
    st.title("ETF Blueprint üìà")
    st.write("Constru√ß√£o de carteiras otimizadas de ETFs")
    
    # Verificar estado da sess√£o
    if 'stage' not in st.session_state:
        st.session_state['stage'] = "input"
    
    # Formul√°rio de entrada
    if st.session_state['stage'] == "input":
        with st.form("portfolio_form"):
            st.subheader("Perfil do Investidor")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("Perfil de Risco")
                perfil = st.selectbox(
                    "Escolha seu perfil",
                    options=["Conservador", "Moderado", "Agressivo"],
                    key="perfil"
                )
            
            with col2:
                st.write("Drawdown M√°ximo Aceit√°vel (%)")
                drawdown = st.slider(
                    "",
                    min_value=5,
                    max_value=40,
                    value=15,
                    key="drawdown"
                )
            
            st.write("Horizonte de Investimento (anos)")
            horizon = st.slider(
                "",
                min_value=1,
                max_value=10,
                value=5,
                key="horizon"
            )
            
            st.write("Universo de ETFs")
            universo = st.radio(
                "",
                options=["BR", "EUA", "Ambos"],
                horizontal=True,
                key="universo"
            )
            
            submitted = st.form_submit_button("Gerar Carteira")
            
            if submitted:
                # Verificar se temos API key da FMP
                fmp_api_key = st.secrets.get("api_keys", {}).get("FMP_API_KEY", "")
                if not fmp_api_key:
                    # Usar dados simulados (modo demonstra√ß√£o)
                    st.session_state['demo_mode'] = True
                    progress_text = "Gerando carteira otimizada com dados simulados (modo demonstra√ß√£o)..."
                else:
                    st.session_state['demo_mode'] = False
                    progress_text = "Gerando carteira otimizada..."
                
                progress_bar = st.progress(0)
                progress_status = st.empty()
                progress_status.write(progress_text)
                
                # Selecionar ETFs com base no universo escolhido
                if universo == "BR":
                    etfs = ETFs_BR
                elif universo == "EUA":
                    etfs = ETFs_EUA
                else:
                    etfs = ETFs_BR + ETFs_EUA
                
                # Processar dados e otimizar carteira
                try:
                    progress_status.write(f"{progress_text} Obtendo dados de pre√ßos...")
                    progress_bar.progress(0.2)
                    
                    # Obter dados de pre√ßo (hist√≥ricos ou simulados)
                    prices_df = get_prices(etfs)
                    
                    progress_status.write(f"{progress_text} Otimizando aloca√ß√£o...")
                    progress_bar.progress(0.6)
                    
                    # Otimizar portf√≥lio
                    allocation, performance = otimizar(etfs, perfil, prices_df)
                    
                    # Criar dataframe de aloca√ß√£o
                    df_aloc = pd.DataFrame(allocation.items(), columns=['ETF', 'Aloca√ß√£o (%)'])
                    df_aloc = df_aloc.sort_values('Aloca√ß√£o (%)', ascending=False)
                    
                    progress_status.write(f"{progress_text} Gerando an√°lise textual...")
                    progress_bar.progress(0.8)
                    
                    # Gerar texto de an√°lise
                    if st.session_state.get('demo_mode', False):
                        analise = gerar_texto_demo(allocation, perfil)
                    else:
                        analise = gerar_texto(allocation, perfil)
                    
                    progress_status.write(f"{progress_text} Concluindo...")
                    progress_bar.progress(1.0)
                    
                    # Armazenar resultados na sess√£o
                    st.session_state['portfolio_result'] = {
                        'alocacao': df_aloc,
                        'performance': performance,
                        'analise': analise,
                        'carteira': allocation,
                        'perfil': perfil,
                        'universo': universo
                    }
                    
                    # Avan√ßar para a tela de resultados
                    st.session_state['stage'] = "result"
                    
                    # Recarregar a p√°gina para exibir resultados
                    st.experimental_rerun()
                    
                except Exception as e:
                    st.error(f"Ocorreu um erro durante a otimiza√ß√£o: {str(e)}")

    # Mostrar resultados da carteira otimizada
    elif st.session_state['stage'] == "result":
        # Exibir resultados da carteira otimizada
        
        # Recuperar dados
        df_aloc = st.session_state['portfolio_result']['alocacao']
        performance = st.session_state['portfolio_result']['performance']
        analise = st.session_state['portfolio_result']['analise']
        carteira = st.session_state['portfolio_result']['carteira']
        perfil = st.session_state['portfolio_result']['perfil']
        universo = st.session_state['portfolio_result']['universo']
        
        # Verificar se estamos em modo demonstra√ß√£o
        if st.session_state.get('demo_mode', False):
            st.info("**Modo demonstra√ß√£o:** Esta carteira foi gerada com dados simulados, pois n√£o h√° uma chave de API configurada.")
        
        # Mostrar mensagem de sucesso
        st.success("Carteira otimizada com sucesso!")
        
        # Layout em colunas
        col1, col2 = st.columns([3, 2])
        
        with col1:
            # Tabela de aloca√ß√£o
            st.subheader("Aloca√ß√£o Recomendada")
            st.dataframe(df_aloc, use_container_width=True)
            
            # M√©tricas de desempenho
            st.subheader("Desempenho Esperado")
            perf_col1, perf_col2, perf_col3 = st.columns(3)
            
            retorno, risco, sharpe = performance
            
            perf_col1.metric(
                "Retorno Anual Esperado",
                f"{retorno:.2%}"
            )
            
            perf_col2.metric(
                "Volatilidade Anual",
                f"{risco:.2%}"
            )
            
            perf_col3.metric(
                "Sharpe Ratio",
                f"{sharpe:.2f}"
            )
            
            # An√°lise textual
            st.subheader("An√°lise da Carteira")
            st.markdown(analise)
            
            # Bot√µes de download
            btn_col1, btn_col2 = st.columns(2)
            
            with btn_col1:
                # Preparar CSV para download
                csv = df_aloc.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="Baixar CSV",
                    data=csv,
                    file_name=f"etf_portfolio_{perfil.lower()}.csv",
                    mime="text/csv",
                    key="download-csv"
                )
            
            with btn_col2:
                # Preparar PDF para download
                pdf_file = gerar_pdf(df_aloc, analise, perfil, universo, performance)
                st.download_button(
                    label="Baixar PDF",
                    data=pdf_file,
                    file_name=f"etf_portfolio_{perfil.lower()}.pdf",
                    mime="application/pdf",
                    key="download-pdf"
                )
        
        with col2:
            # Gr√°fico de pizza
            st.subheader("Distribui√ß√£o da Carteira")
            
            fig = px.pie(
                df_aloc,
                values='Aloca√ß√£o (%)',
                names='ETF',
                title='Composi√ß√£o da Carteira'
            )
            
            fig.update_traces(
                textposition='inside',
                textinfo='percent+label',
                texttemplate="%{label}<br>%{percent:.1%}"
            )
            
            fig.update_layout(
                height=450,
                margin=dict(t=60, b=20, l=20, r=20)
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Bot√£o para retornar
        if st.button("‚Üê Voltar para Entrada", key="back-btn"):
            st.session_state['stage'] = "input"
            st.experimental_rerun() 